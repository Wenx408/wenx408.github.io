(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{558:function(t,v,_){"use strict";_.r(v);var a=_(4),d=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("div",{staticClass:"custom-block tip"},[_("p",[t._v("本篇简单介绍javap、jps、jstat、jcmd、jinfo、jhat、jmap、jstack、jconsole及jvisualVM等JVM内置命令")])]),t._v(" "),_("h2",{attrs:{id:"jdk内置工具-javap"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk内置工具-javap"}},[t._v("#")]),t._v(" JDK内置工具 - javap")]),t._v(" "),_("p",[t._v("java反编译工具，主要用于根据 Java字节码文件反汇编为 Java源代码文件。")]),t._v(" "),_("p",[t._v("javap <options> <classes>")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("命令")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("javap -help --help -?")]),t._v(" "),_("td",[t._v("输出此用法消息")])]),t._v(" "),_("tr",[_("td",[t._v("javap -version")]),t._v(" "),_("td",[t._v("版本信息")])]),t._v(" "),_("tr",[_("td",[t._v("javap -v -verbose")]),t._v(" "),_("td",[t._v("输出附加信息")])]),t._v(" "),_("tr",[_("td",[t._v("javap -l")]),t._v(" "),_("td",[t._v("输出行号和本地变量表")])]),t._v(" "),_("tr",[_("td",[t._v("javap -public")]),t._v(" "),_("td",[t._v("仅显示公共类和成员")])]),t._v(" "),_("tr",[_("td",[t._v("javap -protected")]),t._v(" "),_("td",[t._v("显示受保护的/公共类和成员")])]),t._v(" "),_("tr",[_("td",[t._v("javap -package")]),t._v(" "),_("td",[t._v("显示程序包/受保护的/公共类和成员 (默认)")])]),t._v(" "),_("tr",[_("td",[t._v("javap -p -private")]),t._v(" "),_("td",[t._v("显示所有类和成员")])]),t._v(" "),_("tr",[_("td",[t._v("javap -c")]),t._v(" "),_("td",[t._v("对代码进行反汇编")])]),t._v(" "),_("tr",[_("td",[t._v("javap -s")]),t._v(" "),_("td",[t._v("输出内部类型签名")])]),t._v(" "),_("tr",[_("td",[t._v("javap -sysinfo")]),t._v(" "),_("td",[t._v("显示正在处理的类的系统信息 (路径, 大小, 日期, MD5 散列)")])]),t._v(" "),_("tr",[_("td",[t._v("javap -constants")]),t._v(" "),_("td",[t._v("显示静态最终常量")])]),t._v(" "),_("tr",[_("td",[t._v("javap -classpath <path>")]),t._v(" "),_("td",[t._v("指定查找用户类文件的位置")])]),t._v(" "),_("tr",[_("td",[t._v("javap -bootclasspath <path>")]),t._v(" "),_("td",[t._v("覆盖引导类文件的位置")])])])]),t._v(" "),_("h2",{attrs:{id:"jdk内置工具-jps"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk内置工具-jps"}},[t._v("#")]),t._v(" JDK内置工具 - jps")]),t._v(" "),_("p",[t._v("jps(Java Virtual Machine Process Status Tool)显示当前所有 java进程 pid的命令")]),t._v(" "),_("p",[t._v("jps <options> <hostid>")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("命令")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("jps -q")]),t._v(" "),_("td",[t._v("仅输出VM标识符，不包括classname，jar，name，arguments in main method")])]),t._v(" "),_("tr",[_("td",[t._v("jps -m")]),t._v(" "),_("td",[t._v("输出main method的参数")])]),t._v(" "),_("tr",[_("td",[t._v("jps -l")]),t._v(" "),_("td",[t._v("输出完全的包名，应用主类名，jar的完全路径名")])]),t._v(" "),_("tr",[_("td",[t._v("jps -v")]),t._v(" "),_("td",[t._v("输出 jvm参数")])]),t._v(" "),_("tr",[_("td",[t._v("jps -V")]),t._v(" "),_("td",[t._v("输出通过flag文件传递到 JVM中的参数(.hotspotrc文件或-XX:Flags=所指定的文件)")])]),t._v(" "),_("tr",[_("td",[t._v("jps -Joption")]),t._v(" "),_("td",[t._v("传递参数到vm，例如：-J-Xms512m")])])])]),t._v(" "),_("h2",{attrs:{id:"jdk内置工具-jstat"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk内置工具-jstat"}},[t._v("#")]),t._v(" JDK内置工具 - jstat")]),t._v(" "),_("p",[t._v("jstat监视Java虚拟机（JVM）统计信息")]),t._v(" "),_("p",[_("strong",[t._v("用法：")]),t._v(" jstat [ generalOption | outputOptions vmid [ interval [ s | ms ] [ count ]]]")]),t._v(" "),_("p",[_("strong",[t._v("-t参数：")]),t._v(" 可以在输出信息前面加上一个Timestamp列，显示程序运行的时间。")]),t._v(" "),_("p",[_("strong",[t._v("-h参数：")]),t._v(" 可以在周期性的数据输出时，输出多少行数据后，跟着输出一个表头信息。")]),t._v(" "),_("p",[_("strong",[t._v("interval：")]),t._v(" 指定输出统计周期，"),_("strong",[t._v("count：")]),t._v(" 指定输出多少次数据。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("命令")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("jstat -gc pid")]),t._v(" "),_("td",[t._v("显示gc的信息，查看gc的次数及时间")])]),t._v(" "),_("tr",[_("td",[t._v("jstat -gccapacity pid")]),t._v(" "),_("td",[t._v("内存GC分区中各对象的使用和占用大小")])]),t._v(" "),_("tr",[_("td",[t._v("jstat -gcutil pid")]),t._v(" "),_("td",[t._v("统计gc信息统计")])]),t._v(" "),_("tr",[_("td",[t._v("jstat -gcnew pid")]),t._v(" "),_("td",[t._v("新生代对象的信息")])]),t._v(" "),_("tr",[_("td",[t._v("jstat -gcnewcapacity pid")]),t._v(" "),_("td",[t._v("新生代对象的信息及其占用量")])]),t._v(" "),_("tr",[_("td",[t._v("jstat -gcold pid old")]),t._v(" "),_("td",[t._v("老年代对象的信息")])]),t._v(" "),_("tr",[_("td",[t._v("jstat -gcoldcapacity pid old")]),t._v(" "),_("td",[t._v("老年代对象的信息及其占用量")])]),t._v(" "),_("tr",[_("td",[t._v("jstat -gcpermcapacity pid perm")]),t._v(" "),_("td",[t._v("永久代对象的信息及其占用量")])]),t._v(" "),_("tr",[_("td",[t._v("jstat -class pid")]),t._v(" "),_("td",[t._v("显示加载class的数量及所占空间等信息")])]),t._v(" "),_("tr",[_("td",[t._v("jstat -compiler pid")]),t._v(" "),_("td",[t._v("显示VM实时编译的数量等信息")])]),t._v(" "),_("tr",[_("td",[t._v("jstat -printcompilation pid")]),t._v(" "),_("td",[t._v("当前VM执行的信息")])])])]),t._v(" "),_("h2",{attrs:{id:"jdk内置工具-jcmd"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk内置工具-jcmd"}},[t._v("#")]),t._v(" JDK内置工具 - jcmd")]),t._v(" "),_("p",[t._v("jcmd工具，可以替代 jps工具查看本地的 jvm信息")]),t._v(" "),_("p",[t._v("jcmd -l")]),t._v(" "),_("p",[t._v("jcmd <pid | main class> <command …|PerfCounter.print|-f file>")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("命令")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("jcmd")]),t._v(" "),_("td",[t._v("查看本地的 java进程列表，获取其pid")])]),t._v(" "),_("tr",[_("td",[t._v("jcmd pid help")]),t._v(" "),_("td",[t._v("查看其支持的命令列表")])]),t._v(" "),_("tr",[_("td",[t._v("jcmd pid Thread.print -l")]),t._v(" "),_("td",[t._v("打印线程栈")])]),t._v(" "),_("tr",[_("td",[t._v("jcmd pid VM.command_line")]),t._v(" "),_("td",[t._v("打印启动命令及参数")])]),t._v(" "),_("tr",[_("td",[t._v("jcmd pid GC.heap_dump /data/filename.dump")]),t._v(" "),_("td",[t._v("查看 JVM的Heap Dump")])]),t._v(" "),_("tr",[_("td",[t._v("jcmd pid GC.class_histogram")]),t._v(" "),_("td",[t._v("查看类的统计信息")])]),t._v(" "),_("tr",[_("td",[t._v("jcmd pid VM.system_properties")]),t._v(" "),_("td",[t._v("查看系统属性内容")])]),t._v(" "),_("tr",[_("td",[t._v("jcmd pid VM.uptime")]),t._v(" "),_("td",[t._v("查看虚拟机启动时间")])]),t._v(" "),_("tr",[_("td",[t._v("jcmd pid PerfCounter.print")]),t._v(" "),_("td",[t._v("查看性能统计")])])])]),t._v(" "),_("h2",{attrs:{id:"jdk内置工具-jinfo"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk内置工具-jinfo"}},[t._v("#")]),t._v(" JDK内置工具 - jinfo")]),t._v(" "),_("p",[t._v("jinfo可以查看运行中 jvm的全部参数，还可以设置部分参数。")]),t._v(" "),_("p",[t._v("jinfo [option] pid")]),t._v(" "),_("p",[t._v("jinfo [option] executable core")]),t._v(" "),_("p",[t._v("jinfo [option] [server_id@] remote server IP or hostname")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("命令")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("pid")]),t._v(" "),_("td",[t._v("对应 jvm的进程 id")])]),t._v(" "),_("tr",[_("td",[t._v("executable core")]),t._v(" "),_("td",[t._v("产生 core dump 文件")])]),t._v(" "),_("tr",[_("td",[t._v("[server_id@] remote server IP or hostname")]),t._v(" "),_("td",[t._v("远程的 ip或者 hostname，server IP标记服务的唯一性 id")])])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("命令")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("no option")]),t._v(" "),_("td",[t._v("输出全部的参数和系统属性")])]),t._v(" "),_("tr",[_("td",[t._v("-flag name")]),t._v(" "),_("td",[t._v("输出对应名称的参数")])]),t._v(" "),_("tr",[_("td",[t._v("-flag [+|-]name")]),t._v(" "),_("td",[t._v("开启或者关闭对应名称的参数")])]),t._v(" "),_("tr",[_("td",[t._v("-flag name=value")]),t._v(" "),_("td",[t._v("设定对应名称的参数")])]),t._v(" "),_("tr",[_("td",[t._v("-flags")]),t._v(" "),_("td",[t._v("输出全部的参数")])]),t._v(" "),_("tr",[_("td",[t._v("-sysprops")]),t._v(" "),_("td",[t._v("输出系统属性")])])])]),t._v(" "),_("h2",{attrs:{id:"jdk内置工具-jhat"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk内置工具-jhat"}},[t._v("#")]),t._v(" JDK内置工具 - jhat")]),t._v(" "),_("p",[t._v("Java Head Analyse Tool 分析 java堆的命令，可以将堆中的对象以html的形式显示出来，支持对象查询语言OQL")]),t._v(" "),_("p",[t._v("jhat [-stack <bool>] [-refs <bool>] [-port <port>] [-baseline <file>] [-debug <int>] [-version] [-h|-help] <file>")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("命令")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("-J<flag>")]),t._v(" "),_("td",[t._v("启动 JVM时传入启动参数(例如：-J-Xms512m则指定运行 jhat的 Java虚拟机使用的最大堆内存为512MB)")])]),t._v(" "),_("tr",[_("td",[t._v("-stack false|true")]),t._v(" "),_("td",[t._v("关闭对象分配调用栈跟踪(tracking object allocation call stack)。默认值为true")])]),t._v(" "),_("tr",[_("td",[t._v("-refs false|true")]),t._v(" "),_("td",[t._v("关闭对象引用跟踪(tracking of references to objects)。默认值为true")])]),t._v(" "),_("tr",[_("td",[t._v("-port <port>")]),t._v(" "),_("td",[t._v("设置jhat HTTP server 的端口号；默认值7000")])]),t._v(" "),_("tr",[_("td",[t._v("-exclude <file>")]),t._v(" "),_("td",[t._v("指定文件对象查询时需要排除的数据成员列表(例如：如果文件列出了 java.lang.String.value，那么当从某个特定对象Object o计算可达的对象列表时，引用路径涉及 java.lang.String.value的都会被排除。)")])]),t._v(" "),_("tr",[_("td",[t._v("-baseline <file>")]),t._v(" "),_("td",[t._v("指定一个基准堆转储在两个 heap dumps中有相同object ID的对象会被标记为不是新的(marked as not being new)，其他对象被标记为新的(new)，在比较两个不同的堆转储时很有用。")])]),t._v(" "),_("tr",[_("td",[t._v("-debug <int>")]),t._v(" "),_("td",[t._v("设置debug级别。0表示不输出调试信息；值越大则表示输出更详细的debug信息")])]),t._v(" "),_("tr",[_("td",[t._v("-version")]),t._v(" "),_("td",[t._v("启动后只显示版本信息就退出")])])])]),t._v(" "),_("h2",{attrs:{id:"jdk内置工具-jmap"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk内置工具-jmap"}},[t._v("#")]),t._v(" JDK内置工具 - jmap")]),t._v(" "),_("p",[t._v("打印出 java进程内存中Object的情况。或者将VM中的堆，以二进制输出成文本。")]),t._v(" "),_("p",[t._v("jmap [option] pid (to connect to running process)")]),t._v(" "),_("p",[t._v("jmap [option] executable core (to connect to a core file)")]),t._v(" "),_("p",[t._v("jmap [option] [server_id@] remote server IP or hostname (to connect to remote debug server)")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("命令")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("<no option>")]),t._v(" "),_("td",[t._v("无参，会打印目标 JVM加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径")])]),t._v(" "),_("tr",[_("td",[t._v("-dump:[live,]fromat=b,file=<filename>")]),t._v(" "),_("td",[t._v("使用hprof二进制输出heap内容到文件，live代表只输出存活对象")])]),t._v(" "),_("tr",[_("td",[t._v("-finalizerinfo")]),t._v(" "),_("td",[t._v("打印正等候回收的对象的信息")])]),t._v(" "),_("tr",[_("td",[t._v("-heap")]),t._v(" "),_("td",[t._v("打印heap的概要信息，GC使用的算法，heap的配置及wise heap的使用情况")])]),t._v(" "),_("tr",[_("td",[t._v("-histo[:live]")]),t._v(" "),_("td",[t._v("打印每个class内存信息，VM的内部类会加上前缀“*”，live代表只输出存活对象")])]),t._v(" "),_("tr",[_("td",[t._v("-clstats")]),t._v(" "),_("td",[t._v("打印classload和 jvm heap方法区的信息，每个classloader的名字，活泼性，地址，父classloader和加载的class数量。（另外内部String的数量和占用内存数也会打印出来）")])]),t._v(" "),_("tr",[_("td",[t._v("-F")]),t._v(" "),_("td",[t._v("强迫。在pid没有响应的时候使用-dump或者-histo参数；在这个模式下，live子参数无效")])]),t._v(" "),_("tr",[_("td",[t._v("-h | -help")]),t._v(" "),_("td",[t._v("打印辅助信息")])]),t._v(" "),_("tr",[_("td",[t._v("-J<flag>")]),t._v(" "),_("td",[t._v("传递参数给 jmap启动的 jvm")])])])]),t._v(" "),_("h2",{attrs:{id:"jdk内置工具-jstack"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk内置工具-jstack"}},[t._v("#")]),t._v(" JDK内置工具 - jstack")]),t._v(" "),_("p",[t._v("堆栈跟踪工具。jstack用于打印出给定的 java进程ID或core file或远程调试服务的 Java堆栈信息，如果是在64位机器上，需要指定选项“-J-d64”")]),t._v(" "),_("p",[t._v("jstack [option] pid")]),t._v(" "),_("p",[t._v("jstack [option] executable core")]),t._v(" "),_("p",[t._v("jstack [option] [server_id@] remote server IP or hostname")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("命令")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("core")]),t._v(" "),_("td",[t._v("将被打印信息的core dump文件")])]),t._v(" "),_("tr",[_("td",[t._v("remote server IP or hostname")]),t._v(" "),_("td",[t._v("远程debug服务的主机名或ip")])]),t._v(" "),_("tr",[_("td",[t._v("server_id")]),t._v(" "),_("td",[t._v("唯一id，假如一台主机上多个远程debug服务")])])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("命令")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("-F")]),t._v(" "),_("td",[t._v("强制打印栈信息")])]),t._v(" "),_("tr",[_("td",[t._v("-l")]),t._v(" "),_("td",[t._v("长列表；打印关于锁的附加信息")])]),t._v(" "),_("tr",[_("td",[t._v("-m")]),t._v(" "),_("td",[t._v("打印 java和native c/c++框架的所有栈信息")])]),t._v(" "),_("tr",[_("td",[t._v("-h | -help")]),t._v(" "),_("td",[t._v("打印帮助信息")])])])]),t._v(" "),_("h2",{attrs:{id:"jdk内置工具-jconsole"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk内置工具-jconsole"}},[t._v("#")]),t._v(" JDK内置工具 - jconsole")]),t._v(" "),_("p",[t._v("可视化工具，测试时或者性能调试时使用")]),t._v(" "),_("h2",{attrs:{id:"jdk内置工具-jvisualvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk内置工具-jvisualvm"}},[t._v("#")]),t._v(" JDK内置工具 - jvisualVM")]),t._v(" "),_("p",[t._v("可视化工具，可以看GC、内存、堆栈等信息")])])}),[],!1,null,null,null);v.default=d.exports}}]);